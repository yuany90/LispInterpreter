; Examples showing atoms and the cons/2 function
	nil
	1
	(cons 1 nil)
	(cons nil nil)
	(cons 'a nil)
	(cons 1 (cons 2 (cons 3 nil)))
	'(A B)
	(cons 'C '(A B))

; Shows how to define a function
	(defun consSelf (L) ; L is expected to be a list
		(cons L L)
	)

; Sample uses of consSelf
	(consSelf nil)
	(consSelf '(A B))
	(cons 'a (cons '(b) (cons 'c nil)))
	(cons 'a (cons (cons 'b nil) (cons 'c nil)))

; Shows how to use a conditional
	(defun test1 (A)
		(cond
			((eq A 1) "yes")
			(T "no")
		)
	)

; Sample uses of test1/1
	(test1 1)
	(test1 '1)
	(test1 'a)
	(test1 2)
	(test1 (cons 1 nil))

; The car/1 and cdr/1 functions
	(car '(a b))
	(cdr '(a b))
	(car '(1))
	(cdr '(1))

; Shows how to make a recursive function
	(defun lastElt (L)
		(cond
			((null L) nil) ; L is empty: no last element
			((null (cdr L)) (car L)) ; L is a one-element list
			(T (lastElt (cdr L))) ; recurse
		)
	)

; Sample uses of lastElt/1
	(lastElt nil)
	; (lastElt 1)
	(lastElt '(1))
	(lastElt '(1 2 3))
	(lastElt '(1 (2 2) 3))
	(lastElt '(1 2 (3 3)))

; Example of recursion: list reversal

(defun append (A L)
	(cond
		((null A) L)
		(T (cons (car A) (append (cdr A) L)))
	)
)
(append '(1) '(3 3))

(defun ReverseIt (L)
	(cond
		((null L) nil)
		(T (append (ReverseIt (cdr L)) (cons (car L) nil)))
	)
)

(ReverseIt '(a b))
(ReverseIt '(a b (c d)))
(ReverseIt '(a))
(ReverseIt '())

(defun ReverseAll (L)
	(cond
		((atom L) L)
		(T (append (ReverseAll (cdr L))
			(cons (ReverseAll (car L)) nil)))
	)
)

(ReverseAll '(a b))
(ReverseAll '(a b ((c d) e) f))
(ReverseAll '(a))
(ReverseAll '())

